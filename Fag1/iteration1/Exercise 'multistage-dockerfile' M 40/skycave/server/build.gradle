/*
 * Copyright (c) 2015 - 2023. Henrik BÃ¦rbak Christensen, Aarhus University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/* Gradle build file for SkyCave. */

plugins {
  id 'java-library'
}

repositories {
  mavenCentral()
}

dependencies {
    api project(':common')

    // Bind the SLF4J logging framework to Log4J
    implementation 'org.slf4j:slf4j-log4j12:1.7.36'

    // BCrypt for local password encryption
    implementation 'org.mindrot:jbcrypt:0.4'

    // FRDS.Broker library
    implementation group: 'com.baerbak.maven', name: 'broker',
      version: '3.0.3'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation group: 'org.hamcrest',
      name: 'hamcrest', version: '2.2'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// --- Run commands for SkyCave
// Usage: './gradlew daemon -Pcpf=http.cpf'

task daemon(type: JavaExec) {
  group 'SkyCave'
  description 'Run the skycave daemon, use -Pcpf=(file).cpf to change CPF'

  classpath sourceSets.main.runtimeClasspath
  mainClass = 'cloud.cave.main.CaveDaemon'
  args cpf
}

// --- Make a 'fat jar' for the daemon
// Usage: First './gradlew :server:jar' which makes the
// 'daemon.jar' in server/build/libs
// Next: 'java -jar server/build/libs/daemon.jar http.cpf'
  
jar {
  group 'SkyCave'
  description 'Create a fat Jar for daemon, in build/libs'

  dependsOn(':common:jar')
  
  archiveBaseName = "daemon"
  from {
    configurations.runtimeClasspath.collect {
      it.isDirectory() ? it : zipTree(it) }
  }
  manifest {
    attributes 'Main-Class': 'cloud.cave.main.CaveDaemon'
  }
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
